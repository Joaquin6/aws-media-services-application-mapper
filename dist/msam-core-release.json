{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Transform": "AWS::Serverless-2016-10-31",
    "Outputs": {
        "RestAPIId": {
            "Value": {
                "Ref": "RestAPI"
            }
        },
        "EndpointURL": {
            "Value": {
                "Fn::Sub": "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/msam/"
            }
        },
        "APIKeyID": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Fn::Sub": "https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/api-keys/"
                        },
                        {
                            "Ref": "APIKey"
                        }
                    ]
                ]
            }
        }
    },
    "Resources": {
        "IncomingCloudwatchAlarmRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "mediapackage:List*",
                                        "mediapackage:Describe*",
                                        "medialive:List*",
                                        "medialive:Describe*",
                                        "mediastore:List*",
                                        "mediastore:Get*",
                                        "mediaconnect:List*",
                                        "mediaconnect:Describe*",
                                        "mediatailor:Get*",
                                        "mediatailor:List*",
                                        "ssm:List*",
                                        "ssm:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:ListMetrics",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:Describe*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "autoscaling:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "dynamodb:Query",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "application-autoscaling:DescribeScalableTargets",
                                        "application-autoscaling:DescribeScalingActivities",
                                        "application-autoscaling:DescribeScalingPolicies",
                                        "cloudwatch:DescribeAlarmHistory",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:DescribeAlarmsForMetric",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:ListMetrics",
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeSecurityGroups",
                                        "iam:GetRole",
                                        "iam:ListRoles",
                                        "sns:ListSubscriptions",
                                        "sns:ListSubscriptionsByTopic",
                                        "sns:ListTopics",
                                        "lambda:List*",
                                        "lambda:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Condition": {
                                        "StringLike": {
                                            "iam:PassedToService": [
                                                "application-autoscaling.amazonaws.com",
                                                "dax.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": "*",
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": [
                                                "replication.dynamodb.amazonaws.com",
                                                "dax.amazonaws.com",
                                                "dynamodb.application-autoscaling.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Get*",
                                        "s3:List*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "acm:ListCertificates",
                                        "cloudfront:Get*",
                                        "cloudfront:List*",
                                        "iam:ListServerCertificates",
                                        "route53:List*",
                                        "waf:ListWebACLs",
                                        "waf:GetWebACL"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "IncomingCloudwatchAlarmRolePolicy"
                    }
                ]
            }
        },
        "IncomingCloudwatchAlarm": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Runtime": "python3.6",
                "Handler": "app.incoming_cloudwatch_alarm",
                "CodeUri": {
                    "Key": "msam/edd57e1c9ee79812cde0f363062d2a07",
                    "Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Ref": "BucketBasename"
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    }
                },
                "Tags": {
                    "aws-chalice": "version=1.12.0:stage=dev:app=msam"
                },
                "Timeout": 300,
                "MemorySize": 2560,
                "Environment": {
                    "Variables": {
                        "ALARMS_TABLE_NAME": {
                            "Ref": "AlarmsTableName"
                        },
                        "BUILD_STAMP": "1583259275",
                        "CACHE_ITEM_TTL": {
                            "Ref": "CacheItemTTL"
                        },
                        "CHANNELS_TABLE_NAME": {
                            "Ref": "ChannelsTableName"
                        },
                        "CONTENT_TABLE_NAME": {
                            "Ref": "ContentTableName"
                        },
                        "EVENTS_TABLE_NAME": {
                            "Ref": "EventsTableName"
                        },
                        "CLOUDWATCH_EVENTS_TABLE_NAME": {
                            "Ref": "CloudWatchEventsTableName"
                        },
                        "LAYOUT_TABLE_NAME": {
                            "Ref": "LayoutTableName"
                        },
                        "SETTINGS_TABLE_NAME": {
                            "Ref": "SettingsTableName"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "IncomingCloudwatchAlarmRole",
                        "Arn"
                    ]
                },
                "Description": "MSAM Lambda for handling CloudWatch alarm notifications"
            }
        },
        "UpdateNodesRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "mediapackage:List*",
                                        "mediapackage:Describe*",
                                        "medialive:List*",
                                        "medialive:Describe*",
                                        "mediastore:List*",
                                        "mediastore:Get*",
                                        "mediaconnect:List*",
                                        "mediaconnect:Describe*",
                                        "mediatailor:Get*",
                                        "mediatailor:List*",
                                        "ssm:List*",
                                        "ssm:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:ListMetrics",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:Describe*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "autoscaling:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "dynamodb:Query",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "application-autoscaling:DescribeScalableTargets",
                                        "application-autoscaling:DescribeScalingActivities",
                                        "application-autoscaling:DescribeScalingPolicies",
                                        "cloudwatch:DescribeAlarmHistory",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:DescribeAlarmsForMetric",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:ListMetrics",
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeSecurityGroups",
                                        "iam:GetRole",
                                        "iam:ListRoles",
                                        "sns:ListSubscriptions",
                                        "sns:ListSubscriptionsByTopic",
                                        "sns:ListTopics",
                                        "lambda:List*",
                                        "lambda:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Condition": {
                                        "StringLike": {
                                            "iam:PassedToService": [
                                                "application-autoscaling.amazonaws.com",
                                                "dax.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": "*",
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": [
                                                "replication.dynamodb.amazonaws.com",
                                                "dax.amazonaws.com",
                                                "dynamodb.application-autoscaling.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Get*",
                                        "s3:List*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "acm:ListCertificates",
                                        "cloudfront:Get*",
                                        "cloudfront:List*",
                                        "iam:ListServerCertificates",
                                        "route53:List*",
                                        "waf:ListWebACLs",
                                        "waf:GetWebACL"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "UpdateNodesRolePolicy"
                    }
                ]
            }
        },
        "UpdateNodes": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Runtime": "python3.6",
                "Handler": "app.update_nodes",
                "CodeUri": {
                    "Key": "msam/edd57e1c9ee79812cde0f363062d2a07",
                    "Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Ref": "BucketBasename"
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    }
                },
                "Tags": {
                    "aws-chalice": "version=1.12.0:stage=dev:app=msam"
                },
                "Timeout": 300,
                "MemorySize": 2560,
                "Environment": {
                    "Variables": {
                        "ALARMS_TABLE_NAME": {
                            "Ref": "AlarmsTableName"
                        },
                        "BUILD_STAMP": "1583259275",
                        "CACHE_ITEM_TTL": {
                            "Ref": "CacheItemTTL"
                        },
                        "CHANNELS_TABLE_NAME": {
                            "Ref": "ChannelsTableName"
                        },
                        "CONTENT_TABLE_NAME": {
                            "Ref": "ContentTableName"
                        },
                        "EVENTS_TABLE_NAME": {
                            "Ref": "EventsTableName"
                        },
                        "CLOUDWATCH_EVENTS_TABLE_NAME": {
                            "Ref": "CloudWatchEventsTableName"
                        },
                        "LAYOUT_TABLE_NAME": {
                            "Ref": "LayoutTableName"
                        },
                        "SETTINGS_TABLE_NAME": {
                            "Ref": "SettingsTableName"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "UpdateNodesRole",
                        "Arn"
                    ]
                },
                "Events": {
                    "UpdateNodesEvent": {
                        "Type": "Schedule",
                        "Properties": {
                            "Schedule": "rate(5 minutes)"
                        }
                    }
                },
                "Description": "MSAM Lambda for periodically updating the node cache"
            }
        },
        "UpdateConnectionsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "mediapackage:List*",
                                        "mediapackage:Describe*",
                                        "medialive:List*",
                                        "medialive:Describe*",
                                        "mediastore:List*",
                                        "mediastore:Get*",
                                        "mediaconnect:List*",
                                        "mediaconnect:Describe*",
                                        "mediatailor:Get*",
                                        "mediatailor:List*",
                                        "ssm:List*",
                                        "ssm:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:ListMetrics",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:Describe*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "autoscaling:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "dynamodb:Query",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "application-autoscaling:DescribeScalableTargets",
                                        "application-autoscaling:DescribeScalingActivities",
                                        "application-autoscaling:DescribeScalingPolicies",
                                        "cloudwatch:DescribeAlarmHistory",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:DescribeAlarmsForMetric",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:ListMetrics",
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeSecurityGroups",
                                        "iam:GetRole",
                                        "iam:ListRoles",
                                        "sns:ListSubscriptions",
                                        "sns:ListSubscriptionsByTopic",
                                        "sns:ListTopics",
                                        "lambda:List*",
                                        "lambda:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Condition": {
                                        "StringLike": {
                                            "iam:PassedToService": [
                                                "application-autoscaling.amazonaws.com",
                                                "dax.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": "*",
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": [
                                                "replication.dynamodb.amazonaws.com",
                                                "dax.amazonaws.com",
                                                "dynamodb.application-autoscaling.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Get*",
                                        "s3:List*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "acm:ListCertificates",
                                        "cloudfront:Get*",
                                        "cloudfront:List*",
                                        "iam:ListServerCertificates",
                                        "route53:List*",
                                        "waf:ListWebACLs",
                                        "waf:GetWebACL"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "UpdateConnectionsRolePolicy"
                    }
                ]
            }
        },
        "UpdateConnections": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Runtime": "python3.6",
                "Handler": "app.update_connections",
                "CodeUri": {
                    "Key": "msam/edd57e1c9ee79812cde0f363062d2a07",
                    "Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Ref": "BucketBasename"
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    }
                },
                "Tags": {
                    "aws-chalice": "version=1.12.0:stage=dev:app=msam"
                },
                "Timeout": 300,
                "MemorySize": 2560,
                "Environment": {
                    "Variables": {
                        "ALARMS_TABLE_NAME": {
                            "Ref": "AlarmsTableName"
                        },
                        "BUILD_STAMP": "1583259275",
                        "CACHE_ITEM_TTL": {
                            "Ref": "CacheItemTTL"
                        },
                        "CHANNELS_TABLE_NAME": {
                            "Ref": "ChannelsTableName"
                        },
                        "CONTENT_TABLE_NAME": {
                            "Ref": "ContentTableName"
                        },
                        "EVENTS_TABLE_NAME": {
                            "Ref": "EventsTableName"
                        },
                        "CLOUDWATCH_EVENTS_TABLE_NAME": {
                            "Ref": "CloudWatchEventsTableName"
                        },
                        "LAYOUT_TABLE_NAME": {
                            "Ref": "LayoutTableName"
                        },
                        "SETTINGS_TABLE_NAME": {
                            "Ref": "SettingsTableName"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "UpdateConnectionsRole",
                        "Arn"
                    ]
                },
                "Events": {
                    "UpdateConnectionsEvent": {
                        "Type": "Schedule",
                        "Properties": {
                            "Schedule": "rate(5 minutes)"
                        }
                    }
                },
                "Description": "MSAM Lambda for peridically updating the connection cache"
            }
        },
        "UpdateAlarmsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "mediapackage:List*",
                                        "mediapackage:Describe*",
                                        "medialive:List*",
                                        "medialive:Describe*",
                                        "mediastore:List*",
                                        "mediastore:Get*",
                                        "mediaconnect:List*",
                                        "mediaconnect:Describe*",
                                        "mediatailor:Get*",
                                        "mediatailor:List*",
                                        "ssm:List*",
                                        "ssm:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:ListMetrics",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:Describe*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "autoscaling:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "dynamodb:Query",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "application-autoscaling:DescribeScalableTargets",
                                        "application-autoscaling:DescribeScalingActivities",
                                        "application-autoscaling:DescribeScalingPolicies",
                                        "cloudwatch:DescribeAlarmHistory",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:DescribeAlarmsForMetric",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:ListMetrics",
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeSecurityGroups",
                                        "iam:GetRole",
                                        "iam:ListRoles",
                                        "sns:ListSubscriptions",
                                        "sns:ListSubscriptionsByTopic",
                                        "sns:ListTopics",
                                        "lambda:List*",
                                        "lambda:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Condition": {
                                        "StringLike": {
                                            "iam:PassedToService": [
                                                "application-autoscaling.amazonaws.com",
                                                "dax.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": "*",
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": [
                                                "replication.dynamodb.amazonaws.com",
                                                "dax.amazonaws.com",
                                                "dynamodb.application-autoscaling.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Get*",
                                        "s3:List*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "acm:ListCertificates",
                                        "cloudfront:Get*",
                                        "cloudfront:List*",
                                        "iam:ListServerCertificates",
                                        "route53:List*",
                                        "waf:ListWebACLs",
                                        "waf:GetWebACL"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "UpdateAlarmsRolePolicy"
                    }
                ]
            }
        },
        "UpdateAlarms": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Runtime": "python3.6",
                "Handler": "app.update_alarms",
                "CodeUri": {
                    "Key": "msam/edd57e1c9ee79812cde0f363062d2a07",
                    "Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Ref": "BucketBasename"
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    }
                },
                "Tags": {
                    "aws-chalice": "version=1.12.0:stage=dev:app=msam"
                },
                "Timeout": 300,
                "MemorySize": 2560,
                "Environment": {
                    "Variables": {
                        "ALARMS_TABLE_NAME": {
                            "Ref": "AlarmsTableName"
                        },
                        "BUILD_STAMP": "1583259275",
                        "CACHE_ITEM_TTL": {
                            "Ref": "CacheItemTTL"
                        },
                        "CHANNELS_TABLE_NAME": {
                            "Ref": "ChannelsTableName"
                        },
                        "CONTENT_TABLE_NAME": {
                            "Ref": "ContentTableName"
                        },
                        "EVENTS_TABLE_NAME": {
                            "Ref": "EventsTableName"
                        },
                        "CLOUDWATCH_EVENTS_TABLE_NAME": {
                            "Ref": "CloudWatchEventsTableName"
                        },
                        "LAYOUT_TABLE_NAME": {
                            "Ref": "LayoutTableName"
                        },
                        "SETTINGS_TABLE_NAME": {
                            "Ref": "SettingsTableName"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "UpdateAlarmsRole",
                        "Arn"
                    ]
                },
                "Events": {
                    "UpdateAlarmsEvent": {
                        "Type": "Schedule",
                        "Properties": {
                            "Schedule": "rate(1 minute)"
                        }
                    }
                },
                "Description": "MSAM Lambda for polling CloudWatch alarm states"
            }
        },
        "UpdateFromTagsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "mediapackage:List*",
                                        "mediapackage:Describe*",
                                        "medialive:List*",
                                        "medialive:Describe*",
                                        "mediastore:List*",
                                        "mediastore:Get*",
                                        "mediaconnect:List*",
                                        "mediaconnect:Describe*",
                                        "mediatailor:Get*",
                                        "mediatailor:List*",
                                        "ssm:List*",
                                        "ssm:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:ListMetrics",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:Describe*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "autoscaling:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "dynamodb:Query",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "application-autoscaling:DescribeScalableTargets",
                                        "application-autoscaling:DescribeScalingActivities",
                                        "application-autoscaling:DescribeScalingPolicies",
                                        "cloudwatch:DescribeAlarmHistory",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:DescribeAlarmsForMetric",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:ListMetrics",
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeSecurityGroups",
                                        "iam:GetRole",
                                        "iam:ListRoles",
                                        "sns:ListSubscriptions",
                                        "sns:ListSubscriptionsByTopic",
                                        "sns:ListTopics",
                                        "lambda:List*",
                                        "lambda:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Condition": {
                                        "StringLike": {
                                            "iam:PassedToService": [
                                                "application-autoscaling.amazonaws.com",
                                                "dax.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": "*",
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": [
                                                "replication.dynamodb.amazonaws.com",
                                                "dax.amazonaws.com",
                                                "dynamodb.application-autoscaling.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Get*",
                                        "s3:List*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "acm:ListCertificates",
                                        "cloudfront:Get*",
                                        "cloudfront:List*",
                                        "iam:ListServerCertificates",
                                        "route53:List*",
                                        "waf:ListWebACLs",
                                        "waf:GetWebACL"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "UpdateFromTagsRolePolicy"
                    }
                ]
            }
        },
        "UpdateFromTags": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Runtime": "python3.6",
                "Handler": "app.update_from_tags",
                "CodeUri": {
                    "Key": "msam/edd57e1c9ee79812cde0f363062d2a07",
                    "Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Ref": "BucketBasename"
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    }
                },
                "Tags": {
                    "aws-chalice": "version=1.12.0:stage=dev:app=msam"
                },
                "Timeout": 300,
                "MemorySize": 2560,
                "Environment": {
                    "Variables": {
                        "ALARMS_TABLE_NAME": {
                            "Ref": "AlarmsTableName"
                        },
                        "BUILD_STAMP": "1583259275",
                        "CACHE_ITEM_TTL": {
                            "Ref": "CacheItemTTL"
                        },
                        "CHANNELS_TABLE_NAME": {
                            "Ref": "ChannelsTableName"
                        },
                        "CONTENT_TABLE_NAME": {
                            "Ref": "ContentTableName"
                        },
                        "EVENTS_TABLE_NAME": {
                            "Ref": "EventsTableName"
                        },
                        "CLOUDWATCH_EVENTS_TABLE_NAME": {
                            "Ref": "CloudWatchEventsTableName"
                        },
                        "LAYOUT_TABLE_NAME": {
                            "Ref": "LayoutTableName"
                        },
                        "SETTINGS_TABLE_NAME": {
                            "Ref": "SettingsTableName"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "UpdateFromTagsRole",
                        "Arn"
                    ]
                },
                "Events": {
                    "UpdateFromTagsEvent": {
                        "Type": "Schedule",
                        "Properties": {
                            "Schedule": "rate(5 minutes)"
                        }
                    }
                },
                "Description": "MSAM Lambda for handling diagram and tile updates from tags"
            }
        },
        "ApiHandlerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "mediapackage:List*",
                                        "mediapackage:Describe*",
                                        "medialive:List*",
                                        "medialive:Describe*",
                                        "mediastore:List*",
                                        "mediastore:Get*",
                                        "mediaconnect:List*",
                                        "mediaconnect:Describe*",
                                        "mediatailor:Get*",
                                        "mediatailor:List*",
                                        "ssm:List*",
                                        "ssm:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:ListMetrics",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:Describe*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "autoscaling:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "dynamodb:Query",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "application-autoscaling:DescribeScalableTargets",
                                        "application-autoscaling:DescribeScalingActivities",
                                        "application-autoscaling:DescribeScalingPolicies",
                                        "cloudwatch:DescribeAlarmHistory",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:DescribeAlarmsForMetric",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:ListMetrics",
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeSecurityGroups",
                                        "iam:GetRole",
                                        "iam:ListRoles",
                                        "sns:ListSubscriptions",
                                        "sns:ListSubscriptionsByTopic",
                                        "sns:ListTopics",
                                        "lambda:List*",
                                        "lambda:Get*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*",
                                    "Condition": {
                                        "StringLike": {
                                            "iam:PassedToService": [
                                                "application-autoscaling.amazonaws.com",
                                                "dax.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateServiceLinkedRole"
                                    ],
                                    "Resource": "*",
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:AWSServiceName": [
                                                "replication.dynamodb.amazonaws.com",
                                                "dax.amazonaws.com",
                                                "dynamodb.application-autoscaling.amazonaws.com"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:Get*",
                                        "s3:List*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "acm:ListCertificates",
                                        "cloudfront:Get*",
                                        "cloudfront:List*",
                                        "iam:ListServerCertificates",
                                        "route53:List*",
                                        "waf:ListWebACLs",
                                        "waf:GetWebACL"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "ApiHandlerRolePolicy"
                    }
                ]
            }
        },
        "RestAPI": {
            "Type": "AWS::Serverless::Api",
            "Properties": {
                "EndpointConfiguration": "EDGE",
                "StageName": "msam",
                "DefinitionBody": {
                    "swagger": "2.0",
                    "info": {
                        "version": "1.0",
                        "title": "msam"
                    },
                    "schemes": [
                        "https"
                    ],
                    "paths": {
                        "/layout/view/{view}": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point for retrieving all item positions in a view.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "view",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/layout/nodes/{view}/{node_id}": {
                            "delete": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point for removing nodes from a view.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "view",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    },
                                    {
                                        "name": "node_id",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'DELETE,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/layout/nodes": {
                            "put": {
                                "consumes": [
                                    "application/json",
                                    "application/x-www-form-urlencoded"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point for setting nodes in a view. This adds new nodes and overwrites existing nodes. It does not replace the entire set.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ]
                            },
                            "post": {
                                "consumes": [
                                    "application/json",
                                    "application/x-www-form-urlencoded"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point for setting nodes in a view. This adds new nodes and overwrites existing nodes. It does not replace the entire set.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'PUT,POST,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/channels": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to return all the current channel names.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/channel/{name}": {
                            "put": {
                                "consumes": [
                                    "application/json",
                                    "application/x-www-form-urlencoded"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to set the nodes for a given channel name.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "name",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "post": {
                                "consumes": [
                                    "application/json",
                                    "application/x-www-form-urlencoded"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to set the nodes for a given channel name.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "name",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to get the nodes for a given channel name.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "name",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "delete": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to delete a channel.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "name",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'PUT,POST,GET,DELETE,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/settings/{item_key}": {
                            "get": {
                                "consumes": [
                                    "application/json",
                                    "application/x-www-form-urlencoded"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to get or set the object value for a setting.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "item_key",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "put": {
                                "consumes": [
                                    "application/json",
                                    "application/x-www-form-urlencoded"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to get or set the object value for a setting.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "item_key",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "post": {
                                "consumes": [
                                    "application/json",
                                    "application/x-www-form-urlencoded"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to get or set the object value for a setting.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "item_key",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "delete": {
                                "consumes": [
                                    "application/json",
                                    "application/x-www-form-urlencoded"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to get or set the object value for a setting.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "item_key",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,PUT,POST,DELETE,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cached/{service}/{region}": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to retrieve items from the cache under the service and region name.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "service",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    },
                                    {
                                        "name": "region",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cached/arn/{arn}": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to retrieve items from the cache by arn.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "arn",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "delete": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to delete items from the cache.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "arn",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,DELETE,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cached": {
                            "put": {
                                "consumes": [
                                    "application/json",
                                    "application/x-www-form-urlencoded"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to add items to the cache.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ]
                            },
                            "post": {
                                "consumes": [
                                    "application/json",
                                    "application/x-www-form-urlencoded"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to add items to the cache.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'PUT,POST,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/regions": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to retrieve all regions based on EC2.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/alarms/all/{region}": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to retrieve all CloudWatch alarms for a given region.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "region",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/alarm/{alarm_name}/region/{region}/subscribe": {
                            "put": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to subscribe one or more nodes to a CloudWatch alarm in a region.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "alarm_name",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    },
                                    {
                                        "name": "region",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "post": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to subscribe one or more nodes to a CloudWatch alarm in a region.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "alarm_name",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    },
                                    {
                                        "name": "region",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'PUT,POST,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/alarm/{alarm_name}/region/{region}/unsubscribe": {
                            "put": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to unsubscribe one or more nodes to a CloudWatch alarm in a region.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "alarm_name",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    },
                                    {
                                        "name": "region",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "post": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to unsubscribe one or more nodes to a CloudWatch alarm in a region.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "alarm_name",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    },
                                    {
                                        "name": "region",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'PUT,POST,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/alarm/{alarm_name}/region/{region}/subscribers": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to return subscribed nodes of a CloudWatch alarm in a region.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "alarm_name",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    },
                                    {
                                        "name": "region",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/alarms/{alarm_state}/subscribers": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to return nodes subscribed to alarms in a given alarm state (OK, ALARM, INSUFFICIENT_DATA).",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "alarm_state",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/alarms/subscriber/{resource_arn}": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to return all alarms subscribed to by a node.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "resource_arn",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/alarms/subscribed": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to return a unique list of all subscribed alarms in the database.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/events/state/{state}": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to retrieve all pipeline events in a given state (set, clear).",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "state",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/events/all/{resource_arn}": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to return all CloudWatch events related to a node.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "resource_arn",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/events/{resource_arn}/{start_time}": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to return all CloudWatch events related to a node from start_time to now.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "resource_arn",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    },
                                    {
                                        "name": "start_time",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/cloudwatch/events/{resource_arn}/{start_time}/{end_time}": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to return all CloudWatch events related to a node for a given time range.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "name": "resource_arn",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    },
                                    {
                                        "name": "start_time",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    },
                                    {
                                        "name": "end_time",
                                        "in": "path",
                                        "required": true,
                                        "type": "string"
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        },
                        "/ping": {
                            "get": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200"
                                        }
                                    },
                                    "uri": {
                                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "contentHandling": "CONVERT_TO_TEXT",
                                    "type": "aws_proxy"
                                },
                                "summary": "API entry point to test the API key authentication and retrieve the build timestamp.",
                                "security": [
                                    {
                                        "api_key": []
                                    }
                                ]
                            },
                            "options": {
                                "consumes": [
                                    "application/json"
                                ],
                                "produces": [
                                    "application/json"
                                ],
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "schema": {
                                            "$ref": "#/definitions/Empty"
                                        },
                                        "headers": {
                                            "Access-Control-Allow-Methods": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Origin": {
                                                "type": "string"
                                            },
                                            "Access-Control-Allow-Headers": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "x-amazon-apigateway-integration": {
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                                                "method.response.header.Access-Control-Allow-Origin": "'*'",
                                                "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                                            }
                                        }
                                    },
                                    "requestTemplates": {
                                        "application/json": "{\"statusCode\": 200}"
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "type": "mock"
                                }
                            }
                        }
                    },
                    "definitions": {
                        "Empty": {
                            "type": "object",
                            "title": "Empty Schema"
                        }
                    },
                    "x-amazon-apigateway-binary-media-types": [
                        "application/octet-stream",
                        "application/x-tar",
                        "application/zip",
                        "audio/basic",
                        "audio/ogg",
                        "audio/mp4",
                        "audio/mpeg",
                        "audio/wav",
                        "audio/webm",
                        "image/png",
                        "image/jpg",
                        "image/jpeg",
                        "image/gif",
                        "video/ogg",
                        "video/mpeg",
                        "video/webm"
                    ],
                    "securityDefinitions": {
                        "api_key": {
                            "type": "apiKey",
                            "name": "x-api-key",
                            "in": "header"
                        }
                    }
                }
            }
        },
        "APIHandler": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Runtime": "python3.6",
                "Handler": "app.app",
                "CodeUri": {
                    "Key": "msam/edd57e1c9ee79812cde0f363062d2a07",
                    "Bucket": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Ref": "BucketBasename"
                                },
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    }
                },
                "Tags": {
                    "aws-chalice": "version=1.12.0:stage=dev:app=msam"
                },
                "Timeout": 300,
                "MemorySize": 2560,
                "Environment": {
                    "Variables": {
                        "ALARMS_TABLE_NAME": {
                            "Ref": "AlarmsTableName"
                        },
                        "BUILD_STAMP": "1583259275",
                        "CACHE_ITEM_TTL": {
                            "Ref": "CacheItemTTL"
                        },
                        "CHANNELS_TABLE_NAME": {
                            "Ref": "ChannelsTableName"
                        },
                        "CONTENT_TABLE_NAME": {
                            "Ref": "ContentTableName"
                        },
                        "EVENTS_TABLE_NAME": {
                            "Ref": "EventsTableName"
                        },
                        "CLOUDWATCH_EVENTS_TABLE_NAME": {
                            "Ref": "CloudWatchEventsTableName"
                        },
                        "LAYOUT_TABLE_NAME": {
                            "Ref": "LayoutTableName"
                        },
                        "SETTINGS_TABLE_NAME": {
                            "Ref": "SettingsTableName"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "ApiHandlerRole",
                        "Arn"
                    ]
                },
                "Description": "MSAM Lambda for handling requests from clients"
            }
        },
        "APIHandlerInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "APIHandler"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*",
                        {
                            "RestAPIId": {
                                "Ref": "RestAPI"
                            }
                        }
                    ]
                }
            }
        },
        "UsagePlanKeyAssociation": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
                "KeyId": {
                    "Ref": "APIKey"
                },
                "KeyType": "API_KEY",
                "UsagePlanId": {
                    "Ref": "UsagePlan"
                }
            }
        },
        "UsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "Properties": {
                "ApiStages": [
                    {
                        "ApiId": {
                            "Ref": "RestAPI"
                        },
                        "Stage": "msam"
                    }
                ],
                "Description": "MSAM default usage plan",
                "UsagePlanName": "MSAM Usage Plan"
            },
            "DependsOn": "RestAPImsamStage"
        },
        "APIKey": {
            "Type": "AWS::ApiGateway::ApiKey",
            "Properties": {
                "Description": "MSAM default API key",
                "Enabled": "true"
            }
        }
    },
    "Parameters": {
        "AlarmsTableName": {
            "Description": "This is the DynamoDB table name that stores alarm states for MSAM.",
            "Type": "String",
            "AllowedPattern": "\\S+",
            "MinLength": 1,
            "ConstraintDescription": "Please enter a value for this field."
        },
        "ChannelsTableName": {
            "Description": "This is the DynamoDB table name that stores channel definitions for MSAM.",
            "Type": "String",
            "AllowedPattern": "\\S+",
            "MinLength": 1,
            "ConstraintDescription": "Please enter a value for this field."
        },
        "ContentTableName": {
            "Description": "This is the DynamoDB table name that stores cached content for MSAM.",
            "Type": "String",
            "AllowedPattern": "\\S+",
            "MinLength": 1,
            "ConstraintDescription": "Please enter a value for this field."
        },
        "EventsTableName": {
            "Description": "This is the DynamoDB table name that collects events for MSAM.",
            "Type": "String",
            "AllowedPattern": "\\S+",
            "MinLength": 1,
            "ConstraintDescription": "Please enter a value for this field."
        },
        "LayoutTableName": {
            "Description": "This is the DynamoDB table name that stores diagram layout for MSAM.",
            "Type": "String",
            "AllowedPattern": "\\S+",
            "MinLength": 1,
            "ConstraintDescription": "Please enter a value for this field."
        },
        "SettingsTableName": {
            "Description": "This is the DynamoDB table name that stores configuration settings for MSAM.",
            "Type": "String",
            "AllowedPattern": "\\S+",
            "MinLength": 1,
            "ConstraintDescription": "Please enter a value for this field."
        },
        "CloudWatchEventsTableName": {
            "Description": "This is the DynamoDB table name that stores CloudWatch events for MSAM.",
            "Type": "String",
            "AllowedPattern": "\\S+",
            "MinLength": 1,
            "ConstraintDescription": "Please enter a value for this field."
        },
        "CacheItemTTL": {
            "Default": "7200",
            "Description": "This is the maximum time in seconds a cached item will remain if never updated.",
            "Type": "String",
            "AllowedPattern": "\\S+",
            "MinLength": 1,
            "ConstraintDescription": "Please enter a value for this field."
        },
        "BucketBasename": {
            "Description": "This is the basename of the bucket that holds the MSAM code base.    ",
            "Default": "rodeolabz",
            "Type": "String",
            "AllowedPattern": "\\S+",
            "MinLength": 1,
            "ConstraintDescription": "Please enter a value for this field."
        }
    },
    "Description": "Media Services Application Mapper (MSAM) cloud API (SO0048) (ID: 1583259275)"
}
