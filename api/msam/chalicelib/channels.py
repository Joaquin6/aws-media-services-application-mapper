# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
"""
This file contains helper functions related to channels.
"""

import os
import json
from urllib.parse import unquote

import boto3
from boto3.dynamodb.conditions import Key
from botocore.exceptions import ClientError

from chalicelib import settings
from chalicelib import content
from chalicelib import cache
from chalicelib import nodes

# table names generated by CloudFormation
CHANNELS_TABLE_NAME = os.environ["CHANNELS_TABLE_NAME"]

# DynamoDB
DYNAMO_RESOURCE = boto3.resource("dynamodb")


def delete_channel_nodes(request, name):
    """
    API entry point to delete a channel.
    """
    try:
        name = unquote(name)
        table_name = CHANNELS_TABLE_NAME
        table = DYNAMO_RESOURCE.Table(table_name)
        print(request.method)
        try:
            # get the settings object
            response = table.query(KeyConditionExpression=Key('channel').eq(name))
            print(response)
            # return the response or an empty object
            if "Items" in response:
                for item in response["Items"]:
                    table.delete_item(Key={"channel": item["channel"], "id": item["id"]})
            name_list = settings.get_setting("channels")
            if not name_list:
                name_list = []
            if name in name_list:
                name_list.remove(name)
                settings.put_setting("channels", name_list)
            print("channel items deleted, channel list updated")
        except ClientError:
            print("not found")
        response = {"message": "done"}
    except ClientError as outer_error:
        # send the exception back in the object
        print(outer_error)
        response = {"exception": str(outer_error)}
    return response


def get_channel_list():
    """
    Return all the current channel names.
    """
    channels = settings.get_setting("channels")
    if not channels:
        channels = []
    return channels


def get_channel_state_list(state):
    """
    Return all the channels with the specified state.
    """
    channels = []
    try:
        items = []
        region_name = get_region()
        if region_name != "global":
            items = nodes.update_medialive_channels(region_name)
        else:
            chnls = nodes.medialive_channels(region_name)
            for chnl in chnls:
                service = "medialive-channel"
                chnl['idle_state'] = bool(False)
                if 'State' in chnl:
                    chnl['idle_state'] = bool(chnl['State'] != 'RUNNING')
                items.append(nodes.node_to_ddb_item(chnl["Arn"], service, region_name, chnl))
        for item in items:
            if 'State' in item and item['State'] == state.upper():
                channels.append(item)
            elif 'data' in item:
                data = json.loads(item['data'])
                if 'State' in data and data['State'] == state.upper():
                    channels.append(item)
    except ClientError as error:
        print(error)
    return channels


def set_channel_nodes(name, node_ids):
    """
     API entry point to set the nodes for a given channel name.
    """
    try:
        name = unquote(name)
        table = DYNAMO_RESOURCE.Table(CHANNELS_TABLE_NAME)
        # print(request.json_body)
        # node_ids = request.json_body
        # write the channel nodes to the database
        for node_id in node_ids:
            item = {"channel": name, "id": node_id}
            table.put_item(Item=item)
        # update the list of channels in settings
        name_list = settings.get_setting("channels")
        if not name_list:
            name_list = []
        if name not in name_list:
            name_list.append(name)
            settings.put_setting("channels", name_list)
        result = {"message": "saved"}
        print(result)
    except ClientError as error:
        # send the exception back in the object
        print(error)
        result = {"exception": str(error)}
    return result


def get_channel_nodes(name):
    """
    API entry point to get the nodes for a given channel name.
    """
    try:
        name = unquote(name)
        table_name = CHANNELS_TABLE_NAME
        table = DYNAMO_RESOURCE.Table(table_name)
        try:
            # get the settings object
            response = table.query(KeyConditionExpression=Key('channel').eq(name))
            print(response)
            # return the response or an empty object
            if "Items" in response:
                settings = response["Items"]
            else:
                settings = []
            print("retrieved")
        except ClientError:
            print("not found")
            settings = []
    except ClientError as outer_error:
        # send the exception back in the object
        print(outer_error)
        settings = {"exception": str(outer_error)}
    return settings


def get_region():
    """
    Entry point for the CloudWatch scheduled task to discover and cache services.
    """
    region_name = "global"
    settings_key = "cache-next-region"
    never_regions_key = "never-cache-regions"
    try:
        never_regions = settings.get_setting(never_regions_key)
        if never_regions is None:
            never_regions = []
        region_name_list = nodes.get_region_list()
        next_region = settings.get_setting(settings_key)
        if next_region is None:
            next_region = region_name_list[0]
        # otherwise it's saved for us
        region_name = next_region
    except ClientError as error:
        print(error)
    return region_name
